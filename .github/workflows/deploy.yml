name: build-and-deploy

on:
  push:
    branches: [ "main" ]   # main 푸시 시 자동 실행

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Key
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" | head -5

      # 1) 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) 레지스트리 로그인 (Docker Hub 기준)
      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      # 3) (옵션) buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4) 이미지 빌드 & 푸시 (컨텍스트가 websocket/)
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./websocket            # ← 하위 폴더
          file: ./websocket/Dockerfile    # ← Dockerfile 위치
          push: true
          tags: |
            ${{ secrets.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      # 5) SSH로 서버 접속해서 컨테이너 갱신
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}   # 예) ubuntu
          key:      ${{ secrets.SERVER_SSH_KEY }}# playground.pem 전체 내용
          port:     ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            set -e
            docker login -u "${{ secrets.REGISTRY_USERNAME }}" -p "${{ secrets.REGISTRY_TOKEN }}"
            docker pull "${{ secrets.DOCKER_IMAGE }}:latest"

            # 기존 컨테이너 중지/삭제 (없어도 에러 안나도록 || true)
            docker stop "${{ secrets.CONTAINER_NAME }}" || true
            docker rm   "${{ secrets.CONTAINER_NAME }}" || true

            # 새 컨테이너 실행
            docker run -d --name "${{ secrets.CONTAINER_NAME }}" \
              --env-file /opt/websocket/.env \
              -p ${{ secrets.APP_PORT }}:8080 \
              "${{ secrets.DOCKER_IMAGE }}:latest"

            # 상태 확인
            docker ps --filter "name=${{ secrets.CONTAINER_NAME }}"
