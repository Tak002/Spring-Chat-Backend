name: build-and-deploy

on:
  push:
    branches: [ "main" ,"production"]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write     # draft release 업데이트에 필요

jobs:
  docker-build-and-push:
    if: ${{ !contains((github.event.head_commit.message || github.event.pull_request.title || github.event.pull_request.body || ''), '[skip ci]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: chat-ws
            dockerfile: infra/dockerfile/chat-ws.Dockerfile
            repo_name: chat-ws
          - name: chat-history
            dockerfile: infra/dockerfile/chat-history.Dockerfile
            repo_name: chat-history
          - name: app-service
            dockerfile: infra/dockerfile/app-service.Dockerfile
            repo_name: app-service
          - name: app-media
            dockerfile: infra/dockerfile/app-media.Dockerfile
            repo_name: app-media
          - name: app-auth
            dockerfile: infra/dockerfile/app-auth.Dockerfile
            repo_name: app-auth
    steps:
      - uses: actions/checkout@v5
      - name: Inject WebSocket endpoint to index.html
        run: |
          WS_API_BASE="${{ secrets.WS_API_BASE }}"
          HIS_API_BASE="${{ secrets.HIS_API_BASE }}"
          FILE=./chat-ws/src/main/resources/static/index.html
          
          if [ -n "$WS_API_BASE" ]; then
            echo "Injecting WS_API_BASE=$WS_API_BASE into $FILE"
            sed -i "s|__WS_API_BASE__|$WS_API_BASE|g" "$FILE"
          else
            echo "[WARN] WS_API_BASE not set; keeping default (localhost)."
          fi
          if [ -n "$HIS_API_BASE" ]; then
            echo "Injecting HIS_API_BASE=$HIS_API_BASE into $FILE"
            sed -i "s|__HIS_API_BASE__|$HIS_API_BASE|g" "$FILE"
          else
            echo "[WARN] HIS_API_BASE not set; keeping default (localhost)."
          fi

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '21'

      - name: Build JARs
        run: |
          ./gradlew bootJar --no-daemon -x test

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ secrets.REGISTRY_USERNAME }}/${{ matrix.repo_name }}:latest
            ${{ secrets.REGISTRY_USERNAME }}/${{ matrix.repo_name }}:${{ github.sha }}
          cache-from: type=gha           # ← 캐시 사용
          cache-to: type=gha,mode=max    # ← 캐시 저장(최대)

  deploy:
    if: ${{ github.ref == 'refs/heads/production' && !contains((github.event.head_commit.message || ''), '[skip ci]') }}
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      # 서버로 compose 두 파일 업로드 (base + prod)
      - name: Upload compose (base + prod)
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "infra/docker-compose.base.yml,infra/docker-compose.prod.yml"
          target: "/opt/chat/"
          strip_components: 1
          overwrite: true

      - name: Deploy over SSH (compose pull + up)
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_DATA_REDIS_HOST: ${{ secrets.SPRING_DATA_REDIS_HOST }}
          SPRING_DATA_REDIS_PORT: ${{ secrets.SPRING_DATA_REDIS_PORT }}
          USE_LOCAL_INFRA: ${{ secrets.USE_LOCAL_INFRA }} # "true"면 로컬 postgres/redis 사용
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: IMAGE_TAG,REGISTRY_USERNAME,REGISTRY_TOKEN,CORS_ALLOWED_ORIGINS,REDIS_PASSWORD,SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,SPRING_DATA_REDIS_HOST,SPRING_DATA_REDIS_PORT,USE_LOCAL_INFRA
          script: |
            set -euo pipefail
            mkdir -p /opt/chat
            cd /opt/chat

            # 1) 배포 환경변수 주입 (compose에서 참조)
            export IMAGE_TAG="${IMAGE_TAG}"
            export WS_IMAGE="${REGISTRY_USERNAME}/chat-ws"
            export HIST_IMAGE="${REGISTRY_USERNAME}/chat-history"
            export APP_IMAGE="${REGISTRY_USERNAME}/app-service"
            export MEDIA_IMAGE="${REGISTRY_USERNAME}/app-media"
            export AUTH_IMAGE="${REGISTRY_USERNAME}/app-auth"
            export CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS}"
            
            # 2) 레지스트리 로그인
            : "${REGISTRY_SERVER:=docker.io}"
            echo "${REGISTRY_TOKEN}" | docker login "${REGISTRY_SERVER}" -u "${REGISTRY_USERNAME}" --password-stdin
  
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml pull  \
              chat-ws chat-history app-service app-media app-auth
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml up -d --no-recreate \
              postgres redis
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml up -d --no-deps \
              chat-ws chat-history app-service app-media app-auth
            docker image prune -f

  release-notes:
    if: >-
      ${{
        (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')) ||
        (github.event_name == 'pull_request' &&
         github.event.action == 'closed' &&
         github.event.pull_request.merged == true &&
         github.event.pull_request.base.ref == 'main')
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
