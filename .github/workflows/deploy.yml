name: build-and-deploy

on:
  push:
    branches: [ "main", "production" ]

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Inject WebSocket endpoint
        run: |
          WS_ENDPOINT="${{ secrets.WS_ENDPOINT }}"
          FILE=./chat-ws/src/main/resources/static/index.html
          if [ -n "$WS_ENDPOINT" ]; then
            echo "Injecting WS_ENDPOINT=$WS_ENDPOINT into $FILE"
            sed -i "s|__WS_ENDPOINT__|$WS_ENDPOINT|g" "$FILE"
          else
            echo "[WARN] WS_ENDPOINT not set; keeping default (localhost)."
          fi
      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./chat-ws
          file: ./chat-ws/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          KEY_FILE="${RUNNER_TEMP}/ec2.key"
          printf '%s' "${{ secrets.SERVER_SSH_KEY }}" > "$KEY_FILE"
          sed -i 's/\r$//' "$KEY_FILE"
          chmod 600 "$KEY_FILE"
          echo "KEY_FILE=$KEY_FILE" >> "$GITHUB_ENV"

      - name: Deploy over native SSH (docker compose)
        shell: bash
        env:
          HOST:         ${{ secrets.SERVER_HOST }}
          USER:         ${{ secrets.SERVER_USER }}
          PORT:         ${{ secrets.SERVER_SSH_PORT }}
          IMAGE:        ${{ secrets.DOCKER_IMAGE }}
          REG_USER:     ${{ secrets.REGISTRY_USERNAME }}
          REG_TOKEN:    ${{ secrets.REGISTRY_TOKEN }}
          APP_PORT:     ${{ secrets.APP_PORT }}
        run: |
          set -euo pipefail
          : "${PORT:=22}"
          : "${APP_PORT:=8080}"

          IMAGE_LC="$(printf '%s' "$IMAGE" | tr '[:upper:]' '[:lower:]')"

          ssh -i "$KEY_FILE" -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            bash -s -- "$IMAGE_LC" "$REG_USER" "$REG_TOKEN" "$APP_PORT" <<EOS
          set -euo pipefail
          IMAGE="\$1"
          REG_USER="\$2"
          REG_TOKEN="\$3"
          APP_PORT="\$4"

          sudo mkdir -p /opt/chat-ws
          cd /opt/chat-ws

          # .env 파일 한 줄씩 echo로 생성 (heredoc 대신 안전)
          sudo bash -c "echo DOCKER_IMAGE=\${IMAGE} > .env"
          sudo bash -c "echo SPRING_PROFILES_ACTIVE=prod >> .env"
          sudo bash -c "echo REDIS_HOST=localhost >> .env"
          sudo bash -c "echo REDIS_PORT=6379 >> .env"
          sudo bash -c "echo REDIS_PASSWORD=secret >> .env"
          sudo bash -c "echo APP_PORT=\${APP_PORT} >> .env"
          sudo bash -c "echo WS_ENDPOINT=ws://localhost:8080 >> .env"

          sudo chmod 600 .env
          sudo chown root:root .env

          if [ ! -f docker-compose.yml ]; then
            sudo bash -c "echo 'services:' > docker-compose.yml"
            sudo bash -c "echo '  chat-ws:' >> docker-compose.yml"
            sudo bash -c "echo '    image: \${DOCKER_IMAGE}' >> docker-compose.yml"
            sudo bash -c "echo '    ports:' >> docker-compose.yml"
            sudo bash -c "echo '      - \"\${APP_PORT:-8080}:8080\"' >> docker-compose.yml"
            sudo bash -c "echo '    env_file:' >> docker-compose.yml"
            sudo bash -c "echo '      - .env' >> docker-compose.yml"
            sudo bash -c "echo '    restart: unless-stopped' >> docker-compose.yml"
            sudo bash -c "echo '    healthcheck:' >> docker-compose.yml"
            sudo bash -c "echo '      test: [\"CMD-SHELL\", \"wget -qO- http://localhost:8080/actuator/health >/dev/null 2>&1 || exit 1\"]' >> docker-compose.yml"
            sudo bash -c "echo '      interval: 10s' >> docker-compose.yml"
            sudo bash -c "echo '      timeout: 3s' >> docker-compose.yml"
            sudo bash -c "echo '      retries: 5' >> docker-compose.yml"
            sudo bash -c "echo '      start_period: 15s' >> docker-compose.yml"
          fi

          docker login -u "\$REG_USER" -p "\$REG_TOKEN"
          docker compose pull
          docker compose up -d
          docker compose ps
          EOS
