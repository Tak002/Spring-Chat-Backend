name: build-and-deploy

on:
  push:
    branches: [ "main" ]   # main 푸시 시 자동 실행

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Key
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" | head -5

      # 1) 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) 레지스트리 로그인 (Docker Hub 기준)
      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      # 3) (옵션) buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4) 이미지 빌드 & 푸시 (컨텍스트가 websocket/)
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./websocket            # ← 하위 폴더
          file: ./websocket/Dockerfile    # ← Dockerfile 위치
          push: true
          tags: |
            ${{ secrets.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}
  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key (in HOME/.ssh)
        # ~/.ssh 권한 700, 키 파일 400
        run: |
          mkdir -p "$HOME/.ssh"
          echo "${{ secrets.SERVER_SSH_KEY }}" > "$HOME/.ssh/ec2.key"
          sed -i 's/\r$//' "$HOME/.ssh/ec2.key"
          chmod 700 "$HOME/.ssh"
          chmod 400 "$HOME/.ssh/ec2.key"
          ls -l "$HOME/.ssh"  # (디버그) 권한 확인

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}         # ubuntu 또는 ec2-user
          key_path: /home/runner/.ssh/ec2.key          # 절대경로 권장
          port:     22                                  # 커스텀 포트면 값 변경
          script_stop: true
          script: |
            set -e
            docker login -u "${{ secrets.REGISTRY_USERNAME }}" -p "${{ secrets.REGISTRY_TOKEN }}"
            docker pull "${{ secrets.DOCKER_IMAGE }}:latest"
  
            docker stop "${{ secrets.CONTAINER_NAME }}" || true
            docker rm   "${{ secrets.CONTAINER_NAME }}" || true
  
            docker run -d --name "${{ secrets.CONTAINER_NAME }}" \
              --env-file /opt/websocket/.env \
              -p ${{ secrets.APP_PORT }}:8080 \
              "${{ secrets.DOCKER_IMAGE }}:latest"
  
            docker ps --filter "name=${{ secrets.CONTAINER_NAME }}"
