name: build-and-deploy

on:
  push:
    branches: [ "main" ,"production"]

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: chat-ws
            dockerfile: infra/dockerfile/chat-ws.Dockerfile
            out_port: 8080
            repo_name: chat-ws
          - name: chat-history
            dockerfile: infra/dockerfile/chat-history.Dockerfile
            out_port: 8081
            repo_name: chat-history
    steps:
      - uses: actions/checkout@v4
      - name: Inject WebSocket endpoint to index.html
        run: |
          WS_ENDPOINT="${{ secrets.WS_ENDPOINT }}"
          FILE=./chat-ws/src/main/resources/static/index.html
          if [ -n "$WS_ENDPOINT" ]; then
            echo "Injecting WS_ENDPOINT=$WS_ENDPOINT into $FILE"
            sed -i "s|__WS_ENDPOINT__|$WS_ENDPOINT|g" "$FILE"
          else
            echo "[WARN] WS_ENDPOINT not set; keeping default (localhost)."
          fi

      - name: Build JARs
        run: ./gradlew :chat-ws:bootJar :chat-history:bootJar --no-daemon -x test

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ secrets.REGISTRY_USERNAME }}/${{ matrix.repo_name }}:latest
            ${{ secrets.REGISTRY_USERNAME }}/${{ matrix.repo_name }}:${{ github.sha }}
          cache-from: type=gha           # ← 캐시 사용
          cache-to: type=gha,mode=max    # ← 캐시 저장(최대)

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # 서버로 compose 두 파일 업로드 (base + prod)
      - name: Upload compose (base + prod)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "infra/docker-compose.base.yml,infra/docker-compose.prod.yml"
          target: "/opt/chat/"
          strip_components: 1
          overwrite: true

      - name: Deploy over SSH (compose pull + up)
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: IMAGE_TAG,REGISTRY_USERNAME,REGISTRY_TOKEN,CORS_ALLOWED_ORIGINS
          script: |
            set -euo pipefail
            mkdir -p /opt/chat
            cd /opt/chat
            
            # 1) 환경변수 설정
            export IMAGE_TAG="${IMAGE_TAG}"
            export WS_IMAGE="${REGISTRY_USERNAME}/chat-ws"
            export HIST_IMAGE="${REGISTRY_USERNAME}/chat-history"
            export CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS}"
            
            # 2) 레지스트리 로그인
            : "${REGISTRY_SERVER:=docker.io}"
            echo "${REGISTRY_TOKEN}" | docker login "${REGISTRY_SERVER}" -u "${REGISTRY_USERNAME}" --password-stdin
      
            # 3) 도커 컴포즈로 서비스 배포 (postgres, redis는 재생성하지 않음)
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml up -d --no-recreate postgres redis
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml pull app-chat-ws app-chat-history
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml up -d --no-deps app-chat-ws app-chat-history

            docker image prune -f
            
