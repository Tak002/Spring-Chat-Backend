name: Auto Generate PR with Template

on:
  pull_request:
    types: [opened, synchronize, reopened]  # PR Î≥∏Î¨∏ ÏóÖÎç∞Ïù¥Ìä∏

permissions:
  pull-requests: write
  issues: read
  contents: read

jobs:
  create-or-update-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (event-aware)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # PR Ïù¥Î≤§Ìä∏Î©¥ head SHAÎ•º, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏Í∞í(Î∏åÎûúÏπò) ÏÇ¨Ïö©
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || '' }}

      - name: Debug gh auth (PAT)
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh --version
          gh auth status -h github.com || true

      - name: Compute Branch Name (event-aware)
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Get Commit Messages and PR Template (event-aware)
        id: get-content
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            COMMITS=$(git log --pretty=format:"- %s" "${BASE_SHA}..${HEAD_SHA}" || true)
          else
            # push
            git fetch origin main
            COMMITS=$(git log origin/main..HEAD --pretty=format:"- %s" || true)
          fi

          {
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> "$GITHUB_ENV"

          TEMPLATE=$(cat .github/pull_request_template.md || true)
          {
            echo "template<<EOF"
            echo "$TEMPLATE"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Get Issue Title
        id: get-issue-title
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -o -E '#[0-9]+' | sed 's/#//')
          if [ -z "$ISSUE_NUMBER" ]; then
            ISSUE_TITLE="$BRANCH_NAME"
          else
            ISSUE_TITLE=$(gh issue view "$ISSUE_NUMBER" --json title -q ".title")
          fi
          echo "title=$ISSUE_TITLE" >> $GITHUB_OUTPUT

      - name: Generate PR Body with AI
        id: generate-body
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const commitMessages = process.env.commits;
            const prTemplate = process.env.template;
            const geminiApiKey = process.env.GEMINI_API_KEY;

            if (!geminiApiKey) {
              core.setFailed('GEMINI_API_KEY secret is not set.');
              return;
            }

            const prompt = `
              You are an expert software engineer writing a professional Pull Request description.
              Your goal is to analyze the provided commit messages and use them to fill out the given PR template in Korean.
              The description should be clear, technical, and help reviewers understand the purpose and details of the changes.

              Follow these instructions for each section:

              1.  **'## üìù ÏöîÏïΩ (Summary)'**: Read all commit messages and write a high-level summary of the PR's main purpose in one or two sentences.
              2.  **'## ‚úÖ Ï£ºÏöî Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ (Key Changes)'**: Group related commits and list the most significant changes as bullet points.
              3.  **'## üíª ÏÉÅÏÑ∏ Íµ¨ÌòÑ ÎÇ¥Ïö© (Implementation Details)'**: For each key change, provide a detailed technical explanation. Focus on the "why" behind the changes. If a commit message says "refactor: ...", explain what was refactored and why the new approach is better.
              4.  **'## üöÄ Ìä∏Îü¨Î∏î ÏäàÌåÖ (Trouble Shooting)'**: If any commit messages start with "fix:", describe the problem that was solved. If there are no fix commits, you can state that no specific troubleshooting was required for this PR.
              5.  **'## ‚ö†Ô∏è ÏïåÎ†§ÏßÑ Ïù¥Ïäà Î∞è Ï∞∏Í≥† ÏÇ¨Ìï≠ (Known Issues & Notes)'**: Infer any potential follow-up work or limitations from the commits. If none are apparent, you can state that there are no known issues.
              6.  Leave '## üì∏ Ïä§ÌÅ¨Î¶∞ÏÉ∑ (Screenshots)' and '## #Ô∏è‚É£ Í¥ÄÎ†® Ïù¥Ïäà (Related Issues)' sections as they are for the user to fill in.

              The final output must be only the completed markdown text, perfectly matching the provided template structure. Do not add any extra text or wrappers.

              --- PR ÌÖúÌîåÎ¶ø ---
              ${prTemplate}

              --- Ïª§Î∞ã Î©îÏãúÏßÄ Î™©Î°ù ---
              ${commitMessages}
            `;

      # --------- PR ÏÉùÏÑ±: push Ïù¥Î≤§Ìä∏ÏóêÏÑúÎßå ---------
      - name: Find existing PR for this branch (push only)
        if: ${{ github.event_name == 'push' }}
        id: find-pr
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          BR="${{ steps.branch.outputs.name }}"
          NUM=$(gh pr list \
            --repo "${{ github.repository }}" \
            --head "$BR" \
            --state open \
            --json number \
            -q '.[0].number')
          echo "number=$NUM" >> $GITHUB_OUTPUT
          if [ -n "$NUM" ]; then
            echo "Found open PR #$NUM"
          else
            echo "No open PR for $BR"
          fi

      - name: Create Pull Request (push only, if not exists)
        if: ${{ github.event_name == 'push' && steps.find-pr.outputs.number == '' }}
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          PR_BODY: ${{ steps.generate-body.outputs.body }}
        run: |
          gh pr create \
            --repo "${{ github.repository }}" \
            --base main \
            --head "${{ steps.branch.outputs.name }}" \
            --title "${{ steps.get-issue-title.outputs.title }}" \
            --body "$PR_BODY" \
            --assignee "${{ github.actor }}"

      # --------- PR Î≥∏Î¨∏ ÏóÖÎç∞Ïù¥Ìä∏: PR Ïù¥Î≤§Ìä∏ÏóêÏÑúÎßå ---------
      - name: Update PR body (pull_request only)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          PR_BODY: ${{ steps.generate-body.outputs.body }}
        run: |
          gh pr edit "${{ github.event.pull_request.number }}" \
            --repo "${{ github.repository }}" \
            --body "$PR_BODY"
